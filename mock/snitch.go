// Code generated by MockGen. DO NOT EDIT.
// Source: snitch.go

// Package mock_snitch is a generated GoMock package.
package mock_snitch

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        telebot "gopkg.in/telebot.v3"
)

// Mockbot is a mock of bot interface.
type Mockbot struct {
        ctrl     *gomock.Controller
        recorder *MockbotMockRecorder
}

// MockbotMockRecorder is the mock recorder for Mockbot.
type MockbotMockRecorder struct {
        mock *Mockbot
}

// NewMockbot creates a new mock instance.
func NewMockbot(ctrl *gomock.Controller) *Mockbot {
        mock := &Mockbot{ctrl: ctrl}
        mock.recorder = &MockbotMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbot) EXPECT() *MockbotMockRecorder {
        return m.recorder
}

// ChatByID mocks base method.
func (m *Mockbot) ChatByID(id int64) (*telebot.Chat, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ChatByID", id)
        ret0, _ := ret[0].(*telebot.Chat)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ChatByID indicates an expected call of ChatByID.
func (mr *MockbotMockRecorder) ChatByID(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatByID", reflect.TypeOf((*Mockbot)(nil).ChatByID), id)
}

// Handle mocks base method.
func (m_2 *Mockbot) Handle(endpoint interface{}, h telebot.HandlerFunc, m ...telebot.MiddlewareFunc) {
        m_2.ctrl.T.Helper()
        varargs := []interface{}{endpoint, h}
        for _, a := range m {
                varargs = append(varargs, a)
        }
        m_2.ctrl.Call(m_2, "Handle", varargs...)
}

// Handle indicates an expected call of Handle.
func (mr *MockbotMockRecorder) Handle(endpoint, h interface{}, m ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{endpoint, h}, m...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Mockbot)(nil).Handle), varargs...)
}

// Send mocks base method.
func (m *Mockbot) Send(to telebot.Recipient, what interface{}, opts ...interface{}) (*telebot.Message, error) {
        m.ctrl.T.Helper()
        varargs := []interface{}{to, what}
        for _, a := range opts {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "Send", varargs...)
        ret0, _ := ret[0].(*telebot.Message)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockbotMockRecorder) Send(to, what interface{}, opts ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        varargs := append([]interface{}{to, what}, opts...)
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockbot)(nil).Send), varargs...)
}

// Start mocks base method.
func (m *Mockbot) Start() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockbotMockRecorder) Start() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mockbot)(nil).Start))
}
